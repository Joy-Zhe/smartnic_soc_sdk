#!/usr/bin/micropython
#
# This file is distributed as part of Xilinx ARM SDK
#
# Copyright (c) 2020 - 2021,  Xilinx, Inc.
# All rights reserved.
#
import os, json

config_file="/etc/update-system.json"
tmp_config_file = "/tmp/config.json"
tmp_firmware_file = "/tmp/firmware.img"
tmp_itb_file = "/tmp/itb.img"
tmp_boot_tgz = "/tmp/boot.tgz"

sd_block_dev="/dev/mmcblk0"
emmc_block_dev="/dev/mmcblk1"

boot_mount="/mnt/p2"

DEBUG=True

def debug(txt):
    global DEBUG
    if DEBUG:
        print("DEBUG: " + txt)

def path_exists(filename):
    try:
        status = os.stat(filename)
        return True
    except OSError:  # stat failed
        return False

def file_size(filename):
    if path_exists(filename):
        stat = os.stat(filename)
        return stat[6]
    return 0

def umount_boot():
    retval = os.system("umount %s" % boot_mount)
    return retval == 0

def mount_boot(block_dev):
    boot_dev=block_dev + "p2"
    if path_exists(boot_dev):
        if not path_exists(boot_mount):
            os.mkdir(boot_mount)
        if path_exists(boot_mount):
            umount_boot()
            os.system("mount %s %s" % (boot_dev, boot_mount))

def erase_boot():
    if path_exists(boot_mount):
        debug("Erasing " + boot_mount + "/*")
        os.system("rm -rf " + boot_mount + "/*")

def populate_boot(tgz):
    if path_exists(tgz) and path_exists(boot_mount):
        cwd = os.getcwd()
        os.chdir(boot_mount)
        cmdline = "gzip -d -c %s | tar -x" % tgz
        debug("Populating %s from %s using cmdline = %s" %  (boot_mount, tgz, cmdline))
        retval = os.system(cmdline)
        os.chdir(cwd)
        return retval == 0

class update_obj:
    def __init__(self, config):
        self.config_file = config
        self.conf = None
        self.prev_conf = None

    def find_config(self, key, default=None, use_prev = False):
        if self.prev_conf is None:
            use_prev = False
        if not self.conf is None:
            if key in self.conf:
                value = self.conf[key]
                debug("parsing %s returned %s" % (key, str(value)))
                return value
            if use_prev and (key in self.prev_conf):
                value = self.prev_conf[key]
                debug("parsing %s returned %s from previous conf" % (key, str(value)))
                return value
        return default

    def parse_config(self):
        self.conf = None
        if not self.config_file is None:
          with open(self.config_file,"r") as f:
            try:
              self.conf = json.load(f)
            except:
              if file_size(self.config_file) > 0:
                debug("json bad from path %s" % self.config_file)

        self.update_server = self.find_config("update_server", None, True)
        self.update_transport = self.find_config("update_server_transport", "http", True)
        self.update_port = self.find_config("update_server_port", "8000", True)
        self.update_dir = self.find_config("update_dir", None, True)

        self.update_config_file = self.find_config("update_config_file")

#        self.update_fw_file = self.find_config("fw_image_file")

        self.update_fw_sd = self.find_config("update_fw_sd")
        self.update_fw_sd_file = self.find_config("update_fw_sd_file")

        self.update_fw_xspi = self.find_config("update_xspi")
        self.update_fw_xspi_file = self.find_config("update_fw_xspi_file")

        self.update_itb = self.find_config("update_itb")
        self.update_itb_file = self.find_config("update_itb_file")

#        self.update_boot = self.find_config("update_boot")
#        self.update_boot_server = self.find_config("boot_image_server")
#        self.update_boot_image_dir = self.find_config("boot_image_dir")
#        self.update_boot_image_file = self.find_config("boot_image_file")

        self.partition_sd = self.find_config("partition_sd")
        self.partition_sd_16 = self.find_config("partition_sd_16")
        self.partition_sd_32 = self.find_config("partition_sd_32")
        self.partition_sd_64 = self.find_config("partition_sd_64")
        self.partition_sd_128 = self.find_config("partition_sd_128")
        self.partition_sd_256 = self.find_config("partition_sd_256")

        self.partition_emmc = self.find_config("partition_emmc")
        self.partition_emmc_16 = self.find_config("partition_emmc_16")
        self.partition_emmc_32 = self.find_config("partition_emmc_32")
        self.partition_emmc_64 = self.find_config("partition_emmc_64")
        self.partition_emmc_128 = self.find_config("partition_emmc_128")
        self.partition_emmc_256 = self.find_config("partition_emmc_256")

        self.update_sd_boot = self.find_config("update_sd_boot")
        self.update_sd_boot_file = self.find_config("update_sd_boot_file")

        self.update_emmc_boot = self.find_config("update_emmc_boot")
        self.update_emmc_boot_file = self.find_config("update_emmc_boot_file")

        self.erase_boot = self.find_config("erase_boot")

        self.reboot = self.find_config("reboot")

    def fetch_file(self, file , dest):
        if (self.update_transport is None) or (self.update_server is None) or (self.update_dir is None) or (file is None) or (dest is None):
           return False
        url = "%s://%s:%s/%s/%s" % (self.update_transport, self.update_server, self.update_port, self.update_dir, file)
        debug("Trying to load " + dest + " from " + url)
        if path_exists(dest):
            os.system("unlink " + dest)
        os.system("curl -L -o " + dest + " " + url)
        return path_exists(dest)

    def load_new_config(self):
        self.config_file = None
        self.prev_conf = self.conf
        if self.fetch_file(self.update_config_file, tmp_config_file):
            self.config_file = tmp_config_file

    def check_valid(self):
        if self.conf is None:
            return False
#        secure_file = self.path+'.sec'
#        with open(self.path+'.sec') as f:
#            try:
#                 obj = json.load(f)
#                 if "secure" in obj.keys():
#                     if not obj["secure"] is False:
#                         return True
#            except:
#                debug("secure JSON object invalid")
#        return False
        return True

    def update(self):
        again = True
        while again:
            again = False
            self.parse_config()
            self.config_file = None
            if self.check_valid():
                self.do_update()
                self.load_new_config()
                if not self.config_file is None:
                    again = True

    def do_update(self):

        debug("Running do_update()")

        # first see if flash needs partitioning
        if self.partition_sd:
            debug("Autodetect sd size coming soon!")
        if self.partition_sd_16:
            os.system("mkpart_16g mmcblk0")
        if self.partition_sd_32:
            os.system("mkpart_32g mmcblk0")
        if self.partition_sd_64:
            os.system("mkpart_64g mmcblk0")
        if self.partition_sd_128:
            os.system("mkpart_128g mmcblk0")
        if self.partition_sd_256:
            os.system("mkpart_256g mmcblk0")
        if self.partition_emmc:
            print("partition emmc")
        if self.partition_emmc_32:
            os.system("mkpart_32g mmcblk1")
        if self.partition_emmc_64:
            os.system("mkpart_64g mmcblk1")
        if self.partition_emmc_128:
            os.system("mkpart_128g mmcblk1")
        if self.partition_emmc_256:
            os.system("mkpart_256g mmcblk1")

        # then see if boot partition needs updating

        if self.update_fw_sd:
            self.fetch_file(self.update_fw_sd_file, tmp_firmware_file)
            if file_size(tmp_firmware_file) > 20000:
                os.system("update_sd " + tmp_firmware_file)
            else:
                debug("not programming file")

        if self.update_fw_xspi:
            self.fetch_file(self.update_fw_xspi_file, tmp_firmware_file)
            if file_size(tmp_firmware_file) > 20000:
                os.system("update_xspi_fw " + tmp_firmware_file)
            else:
                debug("not programming file")

        if self.update_sd_boot:
            self.fetch_file(self.update_sd_boot_file, tmp_boot_tgz)
            if file_size(tmp_boot_tgz) > 100000:
                debug("installing " + tmp_boot_tgz + " over boot partition")
                mount_boot(sd_block_dev)
                if self.erase_boot:
                    erase_boot()
                populate_boot(tmp_boot_tgz)
                umount_boot()
            else:
                debug("Unable to find " + boot_tgz_path)

        if self.update_emmc_boot:
            self.fetch_file(self.update_emmc_boot_file, tmp_boot_tgz)
            if file_size(tmp_boot_tgz) > 100000:
                debug("installing " + tmp_boot_tgz + " over boot partition")
                mount_boot(emmc_block_dev)
                if self.erase_boot:
                    erase_boot()
                populate_boot(tmp_boot_tgz)
                umount_boot()
            else:
                debug("Unable to find " + boot_tgz_path)

        # then see if itb needs updating

        # then see if fw needs updating

        if self.reboot:
            os.system("reboot")

        return False

#        if self.update_boot:
#            boot_tgz_path = self.dir +'/'+self.rootfs_tgz
#            if path_exists(boot_tgz_path):
#                debug("installing %s to boot" % boot_tgz_path)
#                mount_boot()
#                erase_boot()
#                populate_boot(boot_tgz_path)
#                umount_boot()
#            else:
#                debug("Unable to find " + boot_tgz_path)
#        if self.run:
#            os.chdir(self.dir)
#            os.system("./"+self.run)

def get_update(config):
    retval = None
    if path_exists(config):
        retval = update_obj(config)
    return retval

update_obj = get_update(config_file)

if not update_obj is None:
    again = True
    while again:
        again = update_obj.update()
    print("update completed")
else:
    print("update not avaiable")

debug("update-system complete")
